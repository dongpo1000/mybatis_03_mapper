<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--使用mapper接口-->
<mapper namespace="com.pywl.mapper.EmployeeMapperPlus">

    <!--
        自定义某个javaBean的封装规则
        type：自定义规则的Java类型
        id:唯一id方便引用
    -->
    <resultMap id="MySimpleResultMap" type="com.pywl.entity.Employee">
        <!--
            指定主键列的封装规则
            id定义主键会底层有优化；
            column：指定哪一列
            property：指定对应的javaBean属性
        -->
        <id column="id" property="id"/>
        <!-- 定义普通列封装规则 -->
        <result column="user_name" property="userName"/>
        <!-- 其他不指定的列会自动封装：我们只要写resultMap就把全部的映射规则都写上。 -->
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
    </resultMap>

    <!--
        根据id查询，使用 resultMap 自定义高级映射
        Employee findByPrimaryId(Integer id);
    -->
    <select id="findByPrimaryId" resultMap="MySimpleResultMap">
        SELECT *
        FROM tb_employee
        WHERE id=#{id}
    </select>

    <!--
        场景一：
            查询Employee的同时查询员工对应的部门
            Employee  ===  Department
            一个员工有与之对应的部门信息；
            id  last_name  gender    d_id  did  dept_name (private Department dept;)
            用 e.*,d.dept_name 代替上面一行
     -->

    <!--联合查询：级联属性封装结果集-->
    <resultMap id="MyDifficultMap" type="com.pywl.entity.Employee">
        <id column="id" property="id"/>
        <result column="user_name" property="userName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <result column="d_id" property="dept.id"/>
        <result column="dept_name" property="dept.deptName"/>
    </resultMap>


    <!--
        使用association定义关联的单个对象的封装规则；
    -->
    <resultMap id="MyDifficultMap2" type="com.pywl.entity.Employee">
        <id column="id" property="id"/>
        <result column="user_name" property="userName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>

        <!--
            association可以指定联合的javaBean对象
            property="dept"：指定哪个属性是联合的对象
            javaType:指定这个属性对象的类型[不能省略]
        -->
        <association property="dept" javaType="com.pywl.entity.Department">
            <id column="d_id" property="id"/>
            <result column="dept_name" property="deptName"/>
        </association>
    </resultMap>

    <!--
        根据id查询，同时查出部门信息
        Employee findByIdIncludeDept(Integer id);
    -->
    <select id="findByIdIncludeDept" resultMap="MyDifficultMap2">
        SELECT e.*,d.dept_name
        FROM tb_employee e, tb_dept d
        WHERE e.d_id=d.id
        AND e.id=#{id}
    </select>


    <!--
        使用association进行分步查询：
		1、先按照员工id查询员工信息
		2、根据查询员工信息中的d_id值去部门表查出部门信息
		3、部门设置到员工中
    -->
    <resultMap id="MyDefficultMapByStep" type="com.pywl.entity.Employee">
        <id column="id" property="id"/>
        <result column="user_name" property="userName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>

        <!--
            association定义关联对象的封装规则
	 		select:表明当前属性是调用select指定的方法查出的结果
	 		column:指定将哪一列的值传给这个方法

	 		流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性
        -->
        <association property="dept"
                     select="com.pywl.mapper.DepartmentMapper.findByPrimaryId"
                     column="d_id"/>
    </resultMap>

    <!--
        根据 id查询，然后分步查出 Department
        Employee findByIdIncludeDeptStep(Integer id);
    -->
    <select id="findByIdIncludeDeptStep" resultMap="MyDefficultMapByStep">
        SELECT * FROM tb_employee WHERE id=${id}
    </select>
    <!-- 可以使用延迟加载（懒加载）；(按需加载)
        Employee ==> Dept：
            我们每次查询Employee对象的时候，都将一起查询出来。
            部门信息在我们使用的时候再去查询；
            分段查询的基础之上加上两个配置：
     -->

    <!--
	    场景二：
		查询部门的时候将部门对应的所有员工信息也查询出来：详情查看DepartmentMapper.xml
	 -->


    <!--
        根据部门id查询其下所有员工
        List<Employee> findEmpsByDeptId(Integer deptId);
    -->
    <select id="findEmpsByDeptId" resultMap="MySimpleResultMap">
        SELECT *
        FROM tb_employee
        WHERE d_id=#{deptId}
    </select>


    <!-- =======================鉴别器============================ -->
    <!-- <discriminator javaType=""></discriminator>
        鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
        封装Employee：
            如果查出的是女生：就把部门信息查询出来，否则不查询；
            如果是男生，把user_name这一列的值赋值给email;
     -->
    <resultMap type="com.pywl.entity.Employee" id="MyDiscriminatorMap">
        <id column="id" property="id"/>
        <result column="user_name" property="userName"/>
        <result column="gender" property="gender"/>
        <result column="email" property="email"/>
        <!--
            column：指定判定的列名
            javaType：列值对应的java类型  -->
        <discriminator javaType="string" column="gender">
            <!--女生  resultType:指定封装的结果类型；不能缺少。-->
            <case value="2" resultType="com.pywl.entity.Employee">
                <association property="dept"
                             select="com.pywl.mapper.DepartmentMapper.findByPrimaryId"
                             column="d_id">
                </association>
            </case>
            <!--男生 如果是男生，把user_name这一列的值赋值给email; -->
            <case value="1" resultType="com.pywl.entity.Employee">
                <id column="id" property="id"/>
                <result column="user_name" property="userName"/>
                <result column="user_name" property="email"/>
                <result column="gender" property="gender"/>
            </case>
        </discriminator>
    </resultMap>

    <!--Employee findByIdIncludeDeptUseDiscriminator(Integer id);-->
    <select id="findByIdIncludeDeptUseDiscriminator" resultMap="MyDiscriminatorMap">
        SELECT * FROM tb_employee WHERE id=${id}
    </select>



</mapper>